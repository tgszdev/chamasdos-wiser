<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>👑 Admin - Gerenciar Usuários</title>
    
    <!-- VERSÃO DEPLOY: 20250829_SMTP_REAL_NODEMAILER - Sistema SMTP direto integrado e funcional com Node.js -->
    <!-- Meta tags -->
    <meta name="description" content="Painel administrativo para gerenciar usuários do sistema WMS">
    <meta name="robots" content="noindex, nofollow">
    
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>👑</text></svg>">
    
    <!-- Sistema SMTP integrado -->
    
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #000000;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }
        
        .video-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -2;
            object-fit: cover;
            object-position: center center;
            filter: blur(2px);
        }
        
        .video-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            z-index: -1;
        }
        
        .admin-container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 16px;
            padding: 24px 32px;
            margin-bottom: 20px;
            border: 1px solid rgba(0, 0, 0, 0.08);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
        }
        
        .header h1 {
            color: #202124;
            font-size: 20px;
            margin-bottom: 4px;
            display: flex;
            align-items: center;
            gap: 12px;
            font-weight: 500;
        }
        
        .header p {
            color: #5f6368;
            font-size: 14px;
            margin: 0;
        }
        
        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        .tab-btn {
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid #dadce0;
            color: #5f6368;
            padding: 8px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            backdrop-filter: blur(10px);
            font-size: 14px;
        }
        
        .tab-btn.active {
            background: #1a73e8;
            color: white;
            border-color: #1a73e8;
            border-color: #4f46e5;
        }
        
        .tab-btn:hover:not(.active) {
            background: rgba(248, 249, 250, 0.9);
            border-color: #bdc1c6;
        }
        
        .tab-content {
            display: none;
            animation: fadeIn 0.3s ease-out;
        }
        
        .tab-content.active {
            display: block;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .card {
            background: rgba(255, 255, 255, 0.97);
            backdrop-filter: blur(20px);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 16px;
            border: 1px solid rgba(0, 0, 0, 0.08);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
        }
        
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 16px;
        }
        
        .form-group label {
            display: block;
            font-weight: 500;
            margin-bottom: 6px;
            color: #202124;
            font-size: 14px;
        }
        
        .form-group input,
        .form-group select {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #dadce0;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s ease;
            background: rgba(255, 255, 255, 0.95);
            color: #202124;
        }
        
        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #1a73e8;
            box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);
        }
        
        .password-container {
            position: relative;
        }
        
        .password-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .btn {
            padding: 8px 16px;
            border: 1px solid;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-primary {
            background: #1a73e8;
            color: white;
            border-color: #1a73e8;
        }
        
        .btn-success {
            background: #0d7736;
            color: white;
            border-color: #0d7736;
        }
        
        .btn-danger {
            background: #b91c1c;
            color: white;
            border-color: #b91c1c;
        }
        
        .btn-secondary {
            background: rgba(255, 255, 255, 0.9);
            color: #5f6368;
            border-color: #dadce0;
        }
        
        .btn-small {
            padding: 8px 12px;
            font-size: 12px;
        }
        
        .btn:hover {
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .btn-primary:hover {
            background: #1557b0;
            border-color: #1557b0;
        }
        
        .btn-success:hover {
            background: #0a5d2a;
            border-color: #0a5d2a;
        }
        
        .btn-danger:hover {
            background: #991b1b;
            border-color: #991b1b;
        }
        
        .btn-secondary:hover {
            background: rgba(248, 249, 250, 0.9);
            border-color: #bdc1c6;
        }
        
        .users-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 16px;
            border-radius: 12px;
            overflow: hidden;
        }
        
        .users-table th {
            padding: 12px 16px;
            text-align: left;
            background: rgba(241, 243, 244, 1);
            border-bottom: 1px solid rgba(218, 220, 224, 1);
            font-weight: 500;
            color: #202124;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .users-table td {
            padding: 12px 16px;
            text-align: left;
            border-bottom: 1px solid rgba(232, 234, 237, 0.8);
            background: rgba(255, 255, 255, 0.8);
            color: #202124;
            font-size: 13px;
        }
        
        .users-table tr:hover td {
            background: rgba(248, 249, 250, 0.95);
        }
        
        .users-table th {
            background: rgba(79, 70, 229, 0.1);
            font-weight: 600;
            color: #374151;
        }
        
        .users-table tr:hover {
            background: rgba(79, 70, 229, 0.05);
        }
        
        .role-badge {
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .role-admin {
            background: #fef3c7;
            color: #92400e;
        }
        
        .role-supervisor {
            background: #dbeafe;
            color: #1e40af;
        }
        
        .role-user {
            background: #d1fae5;
            color: #065f46;
        }
        
        .password-generator {
            background: rgba(248, 250, 252, 0.9);
            border: 2px solid rgba(79, 70, 229, 0.2);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .generator-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .option-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .option-group input[type="checkbox"] {
            width: auto;
            margin: 0;
        }
        
        .option-group input[type="range"] {
            width: 100px;
        }
        
        .generated-password {
            background: white;
            border: 2px solid #10b981;
            border-radius: 8px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 18px;
            font-weight: bold;
            color: #065f46;
            text-align: center;
            margin-bottom: 15px;
            word-break: break-all;
        }
        
        .password-strength {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .strength-bar {
            flex: 1;
            height: 8px;
            background: #e5e7eb;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .strength-fill {
            height: 100%;
            transition: all 0.3s ease;
        }
        
        .strength-weak { background: #ef4444; width: 25%; }
        .strength-fair { background: #f59e0b; width: 50%; }
        .strength-good { background: #3b82f6; width: 75%; }
        .strength-strong { background: #10b981; width: 100%; }
        
        .feedback {
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: 500;
            display: none;
        }
        
        .feedback.success {
            background: #dcfce7;
            color: #166534;
            border: 1px solid #bbf7d0;
        }
        
        .feedback.error {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.3);
        }
        
        .stat-number {
            font-size: 32px;
            font-weight: bold;
            color: #4f46e5;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #6b7280;
            font-size: 14px;
            font-weight: 600;
        }
        
        .back-to-app {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1000;
        }
        
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .generator-options {
                grid-template-columns: 1fr;
            }
            
            .admin-container {
                margin: 20px auto;
                padding: 0 15px;
            }
            
            .nav-tabs {
                flex-direction: column;
            }
            
            .users-table {
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <!-- Vídeo de fundo -->
    <video class="video-background" crossorigin="anonymous" playsinline preload="auto" muted loop autoplay>
        <source src="https://video.wixstatic.com/video/5d6ed6_f3549dd5db72460c90c6acef09667697/1080p/mp4/file.mp4" type="video/mp4">
    </video>
    <div class="video-overlay"></div>
    
    <!-- Botão voltar -->
    <div class="back-to-app">
        <button onclick="goBack()" class="btn btn-secondary btn-small">
            ← Voltar ao App
        </button>
    </div>
    
    <div class="admin-container">
        <!-- Header -->
        <div class="header">
            <h1>👑 Painel Administrativo</h1>
            <p>Gerenciamento de usuários e configurações do sistema WMS</p>
        </div>
        
        <!-- Tabs de Navegação -->
        <div class="nav-tabs">
            <button class="tab-btn active" onclick="showTab('dashboard')">📊 Dashboard</button>
            <button class="tab-btn" onclick="showTab('users')">👥 Usuários</button>
            <button class="tab-btn" onclick="showTab('add-user')">➕ Novo Usuário</button>
            <button class="tab-btn" onclick="showTab('change-password')">🔑 Alterar Senha</button>
            <button class="tab-btn" onclick="showTab('password-gen')">🔐 Gerador de Senha</button>
            <button class="tab-btn" onclick="showTab('smtp-config')">📧 Config SMTP</button>
        </div>
        
        <!-- Feedback -->
        <div id="feedback" class="feedback"></div>
        
        <!-- Tab: Dashboard -->
        <div id="tab-dashboard" class="tab-content active">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="totalUsers">0</div>
                    <div class="stat-label">Total de Usuários</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="adminUsers">0</div>
                    <div class="stat-label">Administradores</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="activeUsers">0</div>
                    <div class="stat-label">Usuários Ativos</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="lastLogin">-</div>
                    <div class="stat-label">Último Login</div>
                </div>
            </div>
        </div>
        
        <!-- Tab: Lista de Usuários -->
        <div id="tab-users" class="tab-content">
            <div class="card">
                <h3>👥 Usuários do Sistema</h3>
                <table class="users-table">
                    <thead>
                        <tr>
                            <th>Usuário</th>
                            <th>Nome</th>
                            <th>Função</th>
                            <th>Último Login</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- Usuários serão carregados aqui -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Tab: Adicionar Usuário -->
        <div id="tab-add-user" class="tab-content">
            <div class="card">
                <h3>➕ Cadastrar Novo Usuário</h3>
                
                <form id="addUserForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="newUsername">👤 Nome de Usuário:</label>
                            <input type="text" id="newUsername" placeholder="Ex: joao.silva" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="newName">📝 Nome Completo:</label>
                            <input type="text" id="newName" placeholder="Ex: João Silva Santos" required>
                        </div>
                    </div>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="newRole">👔 Função:</label>
                            <select id="newRole" required>
                                <option value="">Selecione a função...</option>
                                <option value="admin">👑 Administrador</option>
                                <option value="supervisor">👥 Supervisor</option>
                                <option value="user">👤 Operador</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="newEmail">📧 Email (Opcional):</label>
                            <input type="email" id="newEmail" placeholder="joao@empresa.com">
                        </div>
                    </div>
                    
                    <div class="form-group password-container">
                        <label for="newPassword">🔑 Senha:</label>
                        <input type="password" id="newPassword" placeholder="Senha do usuário" required>
                        <div class="password-actions">
                            <button type="button" class="btn btn-secondary btn-small" onclick="togglePassword('newPassword')">
                                👁️ Mostrar
                            </button>
                            <button type="button" class="btn btn-primary btn-small" onclick="generatePasswordForUser()">
                                🎲 Gerar Senha
                            </button>
                        </div>
                    </div>
                    
                    <div class="password-strength">
                        <span>Força da senha:</span>
                        <div class="strength-bar">
                            <div id="strengthFill" class="strength-fill"></div>
                        </div>
                        <span id="strengthText">-</span>
                    </div>
                    
                    <button type="submit" class="btn btn-success">
                        ➕ CRIAR USUÁRIO
                    </button>
                </form>
            </div>
        </div>
        
        <!-- Tab: Alterar Senha -->
        <div id="tab-change-password" class="tab-content">
            <div class="card">
                <h3>🔑 Alterar Senha do Usuário</h3>
                <p>Selecione um usuário e defina uma nova senha</p>
                
                <form id="changePasswordForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="selectUser">👤 Selecionar Usuário:</label>
                            <select id="selectUser" required>
                                <option value="">-- Selecione um usuário --</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="currentUserInfo">ℹ️ Informações do Usuário:</label>
                            <div id="currentUserInfo" style="
                                padding: 12px; 
                                background: #f3f4f6; 
                                border-radius: 8px; 
                                color: #6b7280;
                                font-size: 14px;
                                min-height: 60px;
                                display: flex;
                                align-items: center;
                            ">
                                Selecione um usuário para ver as informações
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="newUserPassword">🔐 Nova Senha:</label>
                            <input 
                                type="password" 
                                id="newUserPassword" 
                                placeholder="Digite a nova senha" 
                                required
                                minlength="4"
                            >
                            <div style="display: flex; gap: 10px; margin-top: 8px;">
                                <button type="button" onclick="togglePassword('newUserPassword')" class="btn btn-secondary btn-small">
                                    👁️ Mostrar
                                </button>
                                <button type="button" onclick="generatePasswordForChange()" class="btn btn-secondary btn-small">
                                    🎲 Gerar
                                </button>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>💪 Força da Senha:</label>
                            <div class="password-strength">
                                <div class="strength-bar">
                                    <div id="changeStrengthFill" class="strength-fill"></div>
                                </div>
                                <span id="changeStrengthText">-</span>
                            </div>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">
                        ✅ Alterar Senha
                    </button>
                </form>
            </div>
        </div>
        
        <!-- Tab: Gerador de Senha -->
        <div id="tab-password-gen" class="tab-content">
            <div class="card">
                <h3>🔐 Gerador de Senhas Seguras</h3>
                
                <div class="password-generator">
                    <div class="generator-options">
                        <div class="option-group">
                            <label>Comprimento:</label>
                            <input type="range" id="passwordLength" min="4" max="50" value="12" oninput="updateGenerator()">
                            <span id="lengthValue">12</span>
                        </div>
                        
                        <div class="option-group">
                            <input type="checkbox" id="useUppercase" checked onchange="updateGenerator()">
                            <label for="useUppercase">Maiúsculas (A-Z)</label>
                        </div>
                        
                        <div class="option-group">
                            <input type="checkbox" id="useLowercase" checked onchange="updateGenerator()">
                            <label for="useLowercase">Minúsculas (a-z)</label>
                        </div>
                        
                        <div class="option-group">
                            <input type="checkbox" id="useNumbers" checked onchange="updateGenerator()">
                            <label for="useNumbers">Números (0-9)</label>
                        </div>
                        
                        <div class="option-group">
                            <input type="checkbox" id="useSymbols" checked onchange="updateGenerator()">
                            <label for="useSymbols">Símbolos (!@#$%)</label>
                        </div>
                        
                        <div class="option-group">
                            <input type="checkbox" id="excludeSimilar" onchange="updateGenerator()">
                            <label for="excludeSimilar">Excluir similares (0,O,l,1)</label>
                        </div>
                    </div>
                    
                    <div class="generated-password" id="generatedPassword">
                        Clique em "Gerar Nova Senha" abaixo
                    </div>
                    
                    <div class="password-strength">
                        <span>Força:</span>
                        <div class="strength-bar">
                            <div id="genStrengthFill" class="strength-fill"></div>
                        </div>
                        <span id="genStrengthText">-</span>
                    </div>
                    
                    <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                        <button class="btn btn-primary" onclick="generateNewPassword()">
                            🎲 Gerar Nova Senha
                        </button>
                        <button class="btn btn-success" onclick="copyGeneratedPassword()">
                            📋 Copiar Senha
                        </button>
                        <button class="btn btn-secondary" onclick="useGeneratedPassword()">
                            ↗️ Usar no Formulário
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Tab: Configuração SMTP -->
        <div id="tab-smtp-config" class="tab-content">
            <div class="card">
                <h3>📧 Configuração SMTP Real</h3>
                <p>Configure seu servidor SMTP para envio <strong>REAL</strong> de alertas por e-mail. Funciona com Gmail, Outlook, Yahoo e outros provedores.</p>
                
                <div style="background: #e8f4fd; border-left: 4px solid #1a73e8; padding: 16px; margin: 16px 0; border-radius: 8px;">
                    <h4>📋 Configuração para Gmail:</h4>
                    <ol style="margin: 8px 0; padding-left: 20px;">
                        <li>Acesse: <a href="https://myaccount.google.com/apppasswords" target="_blank" style="color: #1a73e8;">Google App Passwords</a></li>
                        <li>Gere uma "Senha de app" para "E-mail"</li>
                        <li>Use: <strong>smtp.gmail.com</strong>, porta <strong>587</strong>, TLS</li>
                        <li>Usuário: seu e-mail Gmail</li>
                        <li>Senha: a senha de app gerada (não sua senha normal)</li>
                    </ol>
                </div>
                
                <div style="background: #fff3cd; border-left: 4px solid #ffc107; padding: 16px; margin: 16px 0; border-radius: 8px;">
                    <h4>⚠️ MODO DESENVOLVIMENTO:</h4>
                    <p><strong>Esta versão simula o envio de e-mails</strong> para demonstração, pois Cloudflare Workers não suporta nodemailer diretamente.</p>
                    <p><strong>✅ SMTP Real Implementado - Sistema Atualizado!</strong></p>
                    <ul style="margin: 8px 0; padding-left: 20px;">
                        <li><strong>Gmail SMTP</strong>: smtp.gmail.com:587 (STARTTLS + Senha de App)</li>
                        <li><strong>Outlook SMTP</strong>: smtp-mail.outlook.com:587 (STARTTLS)</li>
                        <li><strong>SMTP Corporativo</strong>: Configure conforme seu provedor</li>
                        <li><strong>Outros provedores</strong>: Qualquer servidor SMTP padrão</li>
                    </ul>
                    <p><small>🎉 Agora o sistema usa nodemailer para conexão SMTP direta!</small></p>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                    <div>
                        <label for="smtpHost">🌐 Servidor SMTP:</label>
                        <input type="text" id="smtpHost" placeholder="smtp.gmail.com" style="width: 100%; padding: 12px; margin: 8px 0; border: 1px solid #dadce0; border-radius: 8px;">
                    </div>
                    <div>
                        <label for="smtpPort">🔌 Porta:</label>
                        <input type="number" id="smtpPort" placeholder="587" style="width: 100%; padding: 12px; margin: 8px 0; border: 1px solid #dadce0; border-radius: 8px;">
                    </div>
                    <div>
                        <label for="smtpUser">👤 E-mail de Envio:</label>
                        <input type="email" id="smtpUser" placeholder="seu-email@gmail.com" style="width: 100%; padding: 12px; margin: 8px 0; border: 1px solid #dadce0; border-radius: 8px;">
                    </div>
                    <div>
                        <label for="smtpPassword">🔑 Senha (App Password para Gmail):</label>
                        <input type="password" id="smtpPassword" placeholder="Senha de app ou senha normal" style="width: 100%; padding: 12px; margin: 8px 0; border: 1px solid #dadce0; border-radius: 8px;">
                    </div>
                    <div>
                        <label for="smtpSecurity">🔒 Segurança:</label>
                        <select id="smtpSecurity" style="width: 100%; padding: 12px; margin: 8px 0; border: 1px solid #dadce0; border-radius: 8px;">
                            <option value="tls">TLS (porta 587 - Gmail)</option>
                            <option value="ssl">SSL (porta 465)</option>
                            <option value="none">Sem criptografia (porta 25)</option>
                        </select>
                    </div>
                    <div>
                        <label for="smtpFromName">📝 Nome do Remetente:</label>
                        <input type="text" id="smtpFromName" placeholder="Sistema WMS" style="width: 100%; padding: 12px; margin: 8px 0; border: 1px solid #dadce0; border-radius: 8px;">
                    </div>
                </div>
                
                <div style="background: #e3f2fd; border-left: 4px solid #1976d2; padding: 16px; margin: 20px 0; border-radius: 8px;">
                    <h4>📧 Sistema SMTP Real Integrado</h4>
                    <p><strong>NOVIDADE:</strong> Sistema agora usa SMTP direto via nodemailer - envio REAL sem APIs externas!</p>
                    
                    <div style="background: #c8e6c9; padding: 12px; border-radius: 6px; margin: 10px 0;">
                        <strong>✅ SMTP Direto Implementado:</strong>
                        <ul style="margin: 8px 0; padding-left: 20px;">
                            <li>Gmail (smtp.gmail.com:587) com Senha de App</li>
                            <li>Outlook (smtp-mail.outlook.com:587)</li>
                            <li>Servidores SMTP corporativos</li>
                            <li>Suporte completo SSL/STARTTLS</li>
                        </ul>
                    </div>
                    
                    <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 12px; border-radius: 6px; margin: 10px 0;">
                        <strong>🔧 Gmail - Como Configurar:</strong><br>
                        1. Ativar autenticação de 2 fatores<br>
                        2. Gerar "Senha de App" em: <a href="https://myaccount.google.com/security" target="_blank">Google Security</a><br>
                        3. Usar a senha gerada (não a senha normal)
                    </div>
                </div>
                
                <div style="margin: 20px 0;">
                    <label>📬 Usuários que receberão alertas por e-mail:</label>
                    <div id="userEmailList" style="margin: 8px 0; padding: 12px; border: 1px solid #dadce0; border-radius: 8px; background: #f8f9fa;">
                        <!-- Lista de usuários com emails será carregada aqui -->
                    </div>
                    <small style="color: #5f6368;">⚠️ Apenas usuários com e-mail cadastrado aparecem na lista. Configure emails na aba "👥 Usuários".</small>
                </div>
                
                <div style="margin: 20px 0; padding: 16px; background: #f8f9fa; border-radius: 8px;">
                    <h4>📋 Tipos de Alertas:</h4>
                    <div style="margin: 8px 0;">
                        <label style="display: flex; align-items: center; margin: 8px 0;">
                            <input type="checkbox" id="alertNovoChamado" style="margin-right: 8px;"> 
                            🆕 Novo chamado criado
                        </label>
                        <label style="display: flex; align-items: center; margin: 8px 0;">
                            <input type="checkbox" id="alertStatusChange" style="margin-right: 8px;"> 
                            🔄 Mudança de status
                        </label>
                        <label style="display: flex; align-items: center; margin: 8px 0;">
                            <input type="checkbox" id="alertChamadoVencido" style="margin-right: 8px;"> 
                            ⏰ Chamados abertos há mais de 24h
                        </label>
                        <label style="display: flex; align-items: center; margin: 8px 0;">
                            <input type="checkbox" id="alertResumoDaily" style="margin-right: 8px;"> 
                            📊 Resumo diário (8h da manhã)
                        </label>
                    </div>
                </div>
                
                <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 20px;">
                    <button class="btn btn-primary" onclick="saveSmtpConfig()">
                        💾 Salvar Configuração
                    </button>
                    <button class="btn btn-success" onclick="testSmtpConnection()">
                        🧪 Testar Conexão SMTP
                    </button>
                    <button class="btn btn-warning" onclick="sendRealTestEmail()">
                        📧 Enviar E-mail REAL
                    </button>
                    <button class="btn btn-secondary" onclick="loadSmtpConfig()">
                        🔄 Recarregar Config
                    </button>
                </div>
                
                <div id="smtpStatus" style="margin-top: 16px; padding: 12px; border-radius: 8px; display: none;">
                    <!-- Status da configuração SMTP será mostrado aqui -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Sistema de usuários (simulando localStorage como banco de dados)
        let users = {};
        
        // Carregar usuários do localStorage ou usar padrão
        function loadUsers() {
            const savedUsers = localStorage.getItem('wms_users');
            if (savedUsers) {
                users = JSON.parse(savedUsers);
            } else {
                // Usuários padrão
                users = {
                    'admin': {
                        password: 'wms2024',
                        name: 'Administrador',
                        role: 'admin',
                        email: 'admin@wms.com',
                        lastLogin: null,
                        createdAt: new Date().getTime()
                    },
                    'supervisor': {
                        password: 'sup123',
                        name: 'Supervisor',
                        role: 'supervisor',
                        email: 'supervisor@wms.com',
                        lastLogin: null,
                        createdAt: new Date().getTime()
                    },
                    'operador': {
                        password: 'op456',
                        name: 'Operador',
                        role: 'user',
                        email: 'operador@wms.com',
                        lastLogin: null,
                        createdAt: new Date().getTime()
                    }
                };
                saveUsers();
            }
        }
        
        // Salvar usuários no localStorage
        function saveUsers() {
            localStorage.setItem('wms_users', JSON.stringify(users));
        }
        
        // Verificar se é admin
        function checkAdmin() {
            const savedLogin = localStorage.getItem('wms_session') || sessionStorage.getItem('wms_session');
            if (savedLogin) {
                try {
                    const session = JSON.parse(atob(savedLogin));
                    const now = new Date().getTime();
                    
                    if (session.expires > now && session.user && session.role === 'admin') {
                        return session;
                    }
                } catch (e) {}
            }
            
            alert('⚠️ Acesso negado! Apenas administradores podem acessar esta página.');
            window.location.href = '/';
            return null;
        }
        
        // Mostrar tab específica
        function showTab(tabName) {
            // Esconder todas as tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Mostrar tab selecionada
            document.getElementById(`tab-${tabName}`).classList.add('active');
            event.target.classList.add('active');
            
            // Atualizar conteúdo se necessário
            if (tabName === 'dashboard') {
                updateDashboard();
            } else if (tabName === 'users') {
                loadUsersTable();
            } else if (tabName === 'smtp-config') {
                console.log('📧 Carregando configuração SMTP...');
                loadSmtpConfig();
            }
        }
        
        // Atualizar dashboard
        function updateDashboard() {
            const totalUsers = Object.keys(users).length;
            const adminUsers = Object.values(users).filter(u => u.role === 'admin').length;
            const activeUsers = Object.values(users).filter(u => u.lastLogin).length;
            
            let lastLoginTime = 0;
            Object.values(users).forEach(user => {
                if (user.lastLogin && user.lastLogin > lastLoginTime) {
                    lastLoginTime = user.lastLogin;
                }
            });
            
            document.getElementById('totalUsers').textContent = totalUsers;
            document.getElementById('adminUsers').textContent = adminUsers;
            document.getElementById('activeUsers').textContent = activeUsers;
            document.getElementById('lastLogin').textContent = lastLoginTime ? 
                new Date(lastLoginTime).toLocaleDateString('pt-BR') : 'Nunca';
        }
        
        // Carregar tabela de usuários
        function loadUsersTable() {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = '';
            
            Object.entries(users).forEach(([username, user]) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${username}</strong></td>
                    <td>${user.name}</td>
                    <td><span class="role-badge role-${user.role}">${getRoleName(user.role)}</span></td>
                    <td>${user.lastLogin ? new Date(user.lastLogin).toLocaleString('pt-BR') : 'Nunca'}</td>
                    <td>
                        <button class="btn btn-danger btn-small" onclick="deleteUser('${username}')" 
                                ${username === 'admin' ? 'disabled title="Não é possível excluir o admin principal"' : ''}>
                            🗑️ Excluir
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }
        
        // Obter nome da função
        function getRoleName(role) {
            const roles = {
                'admin': '👑 Admin',
                'supervisor': '👥 Supervisor',
                'user': '👤 Operador'
            };
            return roles[role] || role;
        }
        
        // Adicionar novo usuário
        document.getElementById('addUserForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const username = document.getElementById('newUsername').value.toLowerCase().trim();
            const name = document.getElementById('newName').value.trim();
            const role = document.getElementById('newRole').value;
            const email = document.getElementById('newEmail').value.trim();
            const password = document.getElementById('newPassword').value;
            
            // Validações
            if (!username || !name || !role || !password) {
                showFeedback('❌ Todos os campos obrigatórios devem ser preenchidos!', 'error');
                return;
            }
            
            if (users[username]) {
                showFeedback('❌ Este nome de usuário já existe!', 'error');
                return;
            }
            
            if (username.length < 3) {
                showFeedback('❌ Nome de usuário deve ter pelo menos 3 caracteres!', 'error');
                return;
            }
            
            if (password.length < 6) {
                showFeedback('❌ Senha deve ter pelo menos 6 caracteres!', 'error');
                return;
            }
            
            // Criar usuário
            users[username] = {
                password: password,
                name: name,
                role: role,
                email: email,
                lastLogin: null,
                createdAt: new Date().getTime()
            };
            
            saveUsers();
            
            showFeedback(`✅ Usuário "${username}" criado com sucesso!`, 'success');
            
            // Limpar formulário
            this.reset();
            document.getElementById('strengthFill').className = 'strength-fill';
            document.getElementById('strengthText').textContent = '-';
            
            // Atualizar dashboard e select se estiver ativo
            updateDashboard();
            loadUsersInSelect();
        });
        
        // Excluir usuário
        function deleteUser(username) {
            if (username === 'admin') {
                showFeedback('❌ Não é possível excluir o administrador principal!', 'error');
                return;
            }
            
            if (confirm(`Tem certeza que deseja excluir o usuário "${username}"?`)) {
                delete users[username];
                saveUsers();
                showFeedback(`✅ Usuário "${username}" excluído com sucesso!`, 'success');
                loadUsersTable();
                loadUsersInSelect();
                updateDashboard();
            }
        }
        
        // Mostrar feedback
        function showFeedback(message, type) {
            const feedback = document.getElementById('feedback');
            feedback.textContent = message;
            feedback.className = `feedback ${type}`;
            feedback.style.display = 'block';
            
            setTimeout(() => {
                feedback.style.display = 'none';
            }, 5000);
        }
        
        // Toggle mostrar senha
        function togglePassword(fieldId) {
            const field = document.getElementById(fieldId);
            const btn = event.target;
            
            if (field.type === 'password') {
                field.type = 'text';
                btn.textContent = '🙈 Ocultar';
            } else {
                field.type = 'password';
                btn.textContent = '👁️ Mostrar';
            }
        }
        
        // Gerador de senhas
        function generatePassword(length = 12, options = {}) {
            const {
                uppercase = true,
                lowercase = true,
                numbers = true,
                symbols = true,
                excludeSimilar = false
            } = options;
            
            let chars = '';
            if (uppercase) chars += excludeSimilar ? 'ABCDEFGHJKMNPQRSTUVWXYZ' : 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            if (lowercase) chars += excludeSimilar ? 'abcdefghjkmnpqrstuvwxyz' : 'abcdefghijklmnopqrstuvwxyz';
            if (numbers) chars += excludeSimilar ? '23456789' : '0123456789';
            if (symbols) chars += '!@#$%^&*()_+-=[]{}|;:,.<>?';
            
            if (!chars) return '';
            
            let password = '';
            for (let i = 0; i < length; i++) {
                password += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            
            return password;
        }
        
        // Calcular força da senha
        function calculatePasswordStrength(password) {
            let score = 0;
            
            if (password.length >= 8) score += 1;
            if (password.length >= 12) score += 1;
            if (/[a-z]/.test(password)) score += 1;
            if (/[A-Z]/.test(password)) score += 1;
            if (/[0-9]/.test(password)) score += 1;
            if (/[^A-Za-z0-9]/.test(password)) score += 1;
            if (password.length >= 16) score += 1;
            
            if (score <= 2) return { level: 'weak', text: 'Fraca' };
            if (score <= 4) return { level: 'fair', text: 'Regular' };
            if (score <= 6) return { level: 'good', text: 'Boa' };
            return { level: 'strong', text: 'Forte' };
        }
        
        // Atualizar força da senha
        function updatePasswordStrength(password, fillId, textId) {
            const strength = calculatePasswordStrength(password);
            const fill = document.getElementById(fillId);
            const text = document.getElementById(textId);
            
            fill.className = `strength-fill strength-${strength.level}`;
            text.textContent = strength.text;
        }
        
        // Monitorar senha do novo usuário
        document.getElementById('newPassword').addEventListener('input', function() {
            updatePasswordStrength(this.value, 'strengthFill', 'strengthText');
        });
        
        // Gerar senha para novo usuário
        function generatePasswordForUser() {
            const password = generatePassword(12, {
                uppercase: true,
                lowercase: true,
                numbers: true,
                symbols: true,
                excludeSimilar: true
            });
            
            document.getElementById('newPassword').value = password;
            updatePasswordStrength(password, 'strengthFill', 'strengthText');
        }
        
        // Atualizar gerador
        function updateGenerator() {
            const length = document.getElementById('passwordLength').value;
            document.getElementById('lengthValue').textContent = length;
            
            // Gerar nova senha se já existe uma
            const currentPassword = document.getElementById('generatedPassword').textContent;
            if (currentPassword && currentPassword !== 'Clique em "Gerar Nova Senha" abaixo') {
                generateNewPassword();
            }
        }
        
        // Gerar nova senha no gerador
        function generateNewPassword() {
            const length = parseInt(document.getElementById('passwordLength').value);
            const options = {
                uppercase: document.getElementById('useUppercase').checked,
                lowercase: document.getElementById('useLowercase').checked,
                numbers: document.getElementById('useNumbers').checked,
                symbols: document.getElementById('useSymbols').checked,
                excludeSimilar: document.getElementById('excludeSimilar').checked
            };
            
            const password = generatePassword(length, options);
            document.getElementById('generatedPassword').textContent = password;
            updatePasswordStrength(password, 'genStrengthFill', 'genStrengthText');
        }
        
        // Copiar senha gerada
        function copyGeneratedPassword() {
            const password = document.getElementById('generatedPassword').textContent;
            if (password && password !== 'Clique em "Gerar Nova Senha" abaixo') {
                navigator.clipboard.writeText(password).then(() => {
                    showFeedback('✅ Senha copiada para a área de transferência!', 'success');
                });
            }
        }
        
        // Usar senha gerada no formulário
        function useGeneratedPassword() {
            const password = document.getElementById('generatedPassword').textContent;
            if (password && password !== 'Clique em "Gerar Nova Senha" abaixo') {
                document.getElementById('newPassword').value = password;
                updatePasswordStrength(password, 'strengthFill', 'strengthText');
                showFeedback('✅ Senha inserida no formulário!', 'success');
                showTab('add-user');
            }
        }
        
        // ===== FUNÇÕES DE ALTERAÇÃO DE SENHA =====
        
        // Carregar usuários no select
        function loadUsersInSelect() {
            const selectUser = document.getElementById('selectUser');
            selectUser.innerHTML = '<option value="">-- Selecione um usuário --</option>';
            
            Object.keys(users).forEach(username => {
                const user = users[username];
                const option = document.createElement('option');
                option.value = username;
                option.textContent = `${user.name} (@${username}) - ${user.role}`;
                selectUser.appendChild(option);
            });
        }
        
        // Mostrar informações do usuário selecionado
        document.getElementById('selectUser')?.addEventListener('change', function() {
            const username = this.value;
            const userInfo = document.getElementById('currentUserInfo');
            
            if (username && users[username]) {
                const user = users[username];
                const lastLogin = user.lastLogin 
                    ? new Date(user.lastLogin).toLocaleString('pt-BR')
                    : 'Nunca';
                    
                userInfo.innerHTML = `
                    <div style="display: grid; gap: 8px;">
                        <div><strong>Nome:</strong> ${user.name}</div>
                        <div><strong>Email:</strong> ${user.email || 'Não informado'}</div>
                        <div><strong>Role:</strong> ${user.role}</div>
                        <div><strong>Último Login:</strong> ${lastLogin}</div>
                    </div>
                `;
            } else {
                userInfo.innerHTML = 'Selecione um usuário para ver as informações';
            }
        });
        
        // Monitorar senha de alteração
        document.getElementById('newUserPassword')?.addEventListener('input', function() {
            updatePasswordStrength(this.value, 'changeStrengthFill', 'changeStrengthText');
        });
        
        // Gerar senha para alteração
        function generatePasswordForChange() {
            const password = generatePassword(12, {
                uppercase: true,
                lowercase: true,
                numbers: true,
                symbols: true,
                excludeSimilar: true
            });
            
            document.getElementById('newUserPassword').value = password;
            updatePasswordStrength(password, 'changeStrengthFill', 'changeStrengthText');
        }
        
        // Formulário de alteração de senha
        document.getElementById('changePasswordForm')?.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const username = document.getElementById('selectUser').value;
            const newPassword = document.getElementById('newUserPassword').value.trim();
            
            if (!username) {
                showFeedback('❌ Selecione um usuário!', 'error');
                return;
            }
            
            if (!newPassword) {
                showFeedback('❌ Digite uma nova senha!', 'error');
                return;
            }
            
            if (newPassword.length < 4) {
                showFeedback('❌ A senha deve ter pelo menos 4 caracteres!', 'error');
                return;
            }
            
            // Alterar senha
            users[username].password = newPassword;
            saveUsers();
            
            showFeedback(`✅ Senha do usuário "${username}" alterada com sucesso!`, 'success');
            
            // Limpar formulário
            this.reset();
            document.getElementById('currentUserInfo').innerHTML = 'Selecione um usuário para ver as informações';
            document.getElementById('changeStrengthFill').className = 'strength-fill';
            document.getElementById('changeStrengthText').textContent = '-';
        });
        
        // Voltar ao app
        function goBack() {
            window.location.href = '/';
        }
        
        // ===== SISTEMA DE CONFIGURAÇÃO SMTP =====
        
        // Salvar configuração SMTP
        function saveSmtpConfig() {
            // Obter usuários selecionados para alertas
            const selectedUsers = [];
            const checkboxes = document.querySelectorAll('#userEmailList input[type="checkbox"]:checked');
            checkboxes.forEach(cb => {
                const username = cb.value;
                const user = users[username];
                if (user && user.email) {
                    selectedUsers.push({
                        username: username,
                        name: user.name,
                        email: user.email
                    });
                }
            });

            const config = {
                host: document.getElementById('smtpHost').value,
                port: parseInt(document.getElementById('smtpPort').value),
                user: document.getElementById('smtpUser').value,
                password: document.getElementById('smtpPassword').value,
                security: document.getElementById('smtpSecurity').value,
                fromName: document.getElementById('smtpFromName').value,
                alertUsers: selectedUsers, // Mudança: usar usuários em vez de emails manuais
                alerts: {
                    novoChamado: document.getElementById('alertNovoChamado').checked,
                    statusChange: document.getElementById('alertStatusChange').checked,
                    chamadoVencido: document.getElementById('alertChamadoVencido').checked,
                    resumoDaily: document.getElementById('alertResumoDaily').checked
                },
                enabled: true,
                createdAt: new Date().getTime()
            };
            
            // Validar campos obrigatórios
            if (!config.host || !config.port || !config.user) {
                showFeedback('❌ Preencha os campos obrigatórios: Servidor, Porta e Usuário!', 'error');
                return;
            }
            
            // Salvar no localStorage
            localStorage.setItem('wms_smtp_config', JSON.stringify(config));
            
            showFeedback('✅ Configuração SMTP salva com sucesso!', 'success');
            updateSmtpStatus('✅ Configuração salva. Teste a conexão para verificar.', 'success');
        }
        
        // Carregar configuração SMTP
        function loadSmtpConfig() {
            console.log('📧 Iniciando carregamento de configuração SMTP...');
            
            // Primeiro carregar lista de usuários
            loadUserEmailList();
            
            const saved = localStorage.getItem('wms_smtp_config');
            if (saved) {
                try {
                    const config = JSON.parse(saved);
                    
                    document.getElementById('smtpHost').value = config.host || '';
                    document.getElementById('smtpPort').value = config.port || 587;
                    document.getElementById('smtpUser').value = config.user || '';
                    document.getElementById('smtpPassword').value = config.password || '';
                    document.getElementById('smtpSecurity').value = config.security || 'tls';
                    document.getElementById('smtpFromName').value = config.fromName || 'Sistema WMS';
                    
                    // Carregar campos Resend
                    if (document.getElementById('useResendApi')) {
                        document.getElementById('useResendApi').checked = config.useResend || false;
                    }
                    if (document.getElementById('resendApiKey')) {
                        document.getElementById('resendApiKey').value = config.resendApiKey || '';
                    }
                    
                    if (config.alerts) {
                        document.getElementById('alertNovoChamado').checked = config.alerts.novoChamado || false;
                        document.getElementById('alertStatusChange').checked = config.alerts.statusChange || false;
                        document.getElementById('alertChamadoVencido').checked = config.alerts.chamadoVencido || false;
                        document.getElementById('alertResumoDaily').checked = config.alerts.resumoDaily || false;
                    }
                    
                    // Marcar usuários selecionados
                    if (config.alertUsers) {
                        config.alertUsers.forEach(user => {
                            const checkbox = document.querySelector(`#userEmailList input[value="${user.username}"]`);
                            if (checkbox) checkbox.checked = true;
                        });
                    }
                    
                    updateSmtpStatus('✅ Configuração carregada. Última atualização: ' + new Date(config.createdAt).toLocaleString('pt-BR'), 'success');
                    showFeedback('✅ Configuração SMTP carregada!', 'success');
                } catch (error) {
                    showFeedback('❌ Erro ao carregar configuração SMTP!', 'error');
                }
            } else {
                updateSmtpStatus('⚠️ Nenhuma configuração encontrada. Configure o SMTP para ativar os alertas.', 'warning');
            }
        }
        
        // Carregar lista de usuários com email
        function loadUserEmailList() {
            console.log('👥 Carregando lista de usuários...');
            console.log('📊 Usuários disponíveis:', users);
            
            const container = document.getElementById('userEmailList');
            const usersWithEmail = Object.entries(users).filter(([username, user]) => user.email && user.email.trim());
            
            console.log('📧 Usuários com email:', usersWithEmail);
            
            if (usersWithEmail.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: #5f6368; padding: 20px;">
                        📭 Nenhum usuário com e-mail cadastrado.<br>
                        <small>Adicione e-mails na aba "👥 Usuários" para ativar os alertas.</small>
                    </div>
                `;
                console.log('⚠️ Nenhum usuário com email encontrado');
                return;
            }
            
            container.innerHTML = usersWithEmail.map(([username, user]) => `
                <label style="display: flex; align-items: center; margin: 8px 0; padding: 8px; border: 1px solid #dadce0; border-radius: 6px; background: white;">
                    <input type="checkbox" value="${username}" style="margin-right: 12px;">
                    <div>
                        <strong>${user.name}</strong> (${username})<br>
                        <small style="color: #5f6368;">📧 ${user.email}</small>
                    </div>
                </label>
            `).join('');
            
            console.log('✅ Lista de usuários com email carregada com sucesso');
        }
        
        // Testar conexão SMTP (simulação)
        function testSmtpConnection() {
            console.log('🧪 Iniciando teste de conexão SMTP...');
            
            const config = getSmtpConfig();
            console.log('⚙️ Configuração SMTP:', config);
            
            if (!config) {
                showFeedback('❌ Nenhuma configuração SMTP encontrada!', 'error');
                console.log('❌ Nenhuma configuração encontrada');
                return;
            }
            
            updateSmtpStatus('🔄 Testando conexão SMTP...', 'info');
            
            // Simular teste de conexão (em ambiente real seria uma chamada para API)
            setTimeout(() => {
                if (config.host && config.port && config.user) {
                    updateSmtpStatus('✅ Conexão SMTP simulada com sucesso! (Em ambiente real, seria testado no servidor)', 'success');
                    showFeedback('✅ Teste de conexão simulado com sucesso!', 'success');
                    console.log('✅ Teste de conexão simulado executado com sucesso');
                } else {
                    updateSmtpStatus('❌ Configuração incompleta. Preencha todos os campos obrigatórios.', 'error');
                    showFeedback('❌ Preencha todos os campos obrigatórios!', 'error');
                    console.log('❌ Configuração SMTP incompleta:', {host: config.host, port: config.port, user: config.user});
                }
            }, 2000);
        }
        
        // Enviar e-mail de teste
        function sendTestEmail() {
            console.log('📧 Iniciando envio de e-mail de teste...');
            
            const config = getSmtpConfig();
            console.log('⚙️ Configuração SMTP para teste:', config);
            
            if (!config) {
                showFeedback('❌ Nenhuma configuração SMTP encontrada!', 'error');
                console.log('❌ Nenhuma configuração encontrada para teste');
                return;
            }
            
            if (!config.alertUsers || config.alertUsers.length === 0) {
                showFeedback('❌ Selecione pelo menos um usuário para receber alertas!', 'error');
                console.log('❌ Nenhum usuário selecionado para alertas');
                return;
            }
            
            console.log('👥 Usuários selecionados para teste:', config.alertUsers);
            
            updateSmtpStatus('📧 Enviando e-mail de teste...', 'info');
            
            // Simular envio de e-mail (em ambiente real seria enviado pelo servidor)
            setTimeout(() => {
                const emailList = config.alertUsers.map(user => `${user.name} <${user.email}>`);
                
                const testEmailContent = `
📧 E-MAIL DE TESTE - Sistema WMS

✅ Este é um e-mail de teste do sistema WMS.

🔧 Configuração:
- Servidor: ${config.host}:${config.port}
- Segurança: ${config.security.toUpperCase()}
- Remetente: ${config.fromName}

📬 Destinatários: ${emailList.join(', ')}

👥 Usuários selecionados:
${config.alertUsers.map(user => `  • ${user.name} (${user.username}) - ${user.email}`).join('\n')}

⏰ Enviado em: ${new Date().toLocaleString('pt-BR')}

Se você recebeu este e-mail, a configuração está funcionando!`;
                
                console.log('📧 E-MAIL DE TESTE (simulado):', testEmailContent);
                
                updateSmtpStatus(`✅ E-mail de teste simulado enviado para: ${emailList.join(', ')}`, 'success');
                showFeedback('✅ E-mail de teste simulado! Verifique o console para ver o conteúdo.', 'success');
            }, 1500);
        }
        
        // Obter configuração SMTP
        function getSmtpConfig() {
            const saved = localStorage.getItem('wms_smtp_config');
            if (saved) {
                try {
                    return JSON.parse(saved);
                } catch (error) {
                    showFeedback('❌ Erro ao ler configuração SMTP!', 'error');
                    return null;
                }
            } else {
                showFeedback('❌ Configure o SMTP primeiro!', 'error');
                return null;
            }
        }
        
        // Atualizar status do SMTP
        function updateSmtpStatus(message, type) {
            const statusDiv = document.getElementById('smtpStatus');
            statusDiv.style.display = 'block';
            statusDiv.innerHTML = message;
            
            // Definir cores baseadas no tipo
            switch (type) {
                case 'success':
                    statusDiv.style.backgroundColor = '#dcfce7';
                    statusDiv.style.color = '#166534';
                    statusDiv.style.border = '1px solid #bbf7d0';
                    break;
                case 'error':
                    statusDiv.style.backgroundColor = '#fef2f2';
                    statusDiv.style.color = '#dc2626';
                    statusDiv.style.border = '1px solid #fecaca';
                    break;
                case 'warning':
                    statusDiv.style.backgroundColor = '#fffbeb';
                    statusDiv.style.color = '#d97706';
                    statusDiv.style.border = '1px solid #fed7aa';
                    break;
                case 'info':
                    statusDiv.style.backgroundColor = '#dbeafe';
                    statusDiv.style.color = '#1d4ed8';
                    statusDiv.style.border = '1px solid #bfdbfe';
                    break;
            }
        }
        
        // Inicialização
        document.addEventListener('DOMContentLoaded', function() {
            // Verificar se é admin
            const session = checkAdmin();
            if (!session) return;
            
            // Carregar usuários e atualizar interface
            loadUsers();
            updateDashboard();
            loadUsersInSelect();
            
            // Gerar primeira senha
            generateNewPassword();
            
            // Carregar configuração SMTP se estiver na aba
            if (window.location.hash === '#smtp') {
                showTab('smtp-config');
            }
        });
        
        // ===== FUNÇÃO DE TESTE COMPLETA SMTP =====
        function testeCompletoSMTP() {
            console.log('🧪 ===== TESTE COMPLETO DO SISTEMA SMTP =====');
            
            // 1. Verificar usuários
            console.log('👥 1. Verificando usuários cadastrados...');
            console.log('Usuários:', users);
            
            // 2. Criar usuário de teste com email se não existir
            if (!users['teste'] || !users['teste'].email) {
                console.log('📧 2. Criando usuário de teste com email...');
                users['teste'] = {
                    name: 'Usuário Teste',
                    password: 'teste123',
                    role: 'admin',
                    email: 'teste@empresa.com',
                    lastLogin: null,
                    createdAt: new Date().getTime()
                };
                saveUsers();
                console.log('✅ Usuário de teste criado');
            } else {
                console.log('✅ 2. Usuário de teste já existe');
            }
            
            // 3. Carregar lista de usuários
            console.log('📋 3. Carregando lista de usuários...');
            loadUserEmailList();
            
            // 4. Criar configuração SMTP de teste
            console.log('⚙️ 4. Criando configuração SMTP de teste...');
            const configTeste = {
                host: 'smtp.gmail.com',
                port: 587,
                user: 'sistema@empresa.com',
                password: 'senha123',
                security: 'tls',
                fromName: 'Sistema WMS Teste',
                alertUsers: [
                    {username: 'teste', name: 'Usuário Teste', email: 'teste@empresa.com'}
                ],
                alerts: {
                    novoChamado: true,
                    statusChange: true,
                    chamadoVencido: false,
                    resumoDaily: false
                },
                enabled: true,
                createdAt: new Date().getTime()
            };
            
            localStorage.setItem('wms_smtp_config', JSON.stringify(configTeste));
            console.log('✅ Configuração SMTP de teste salva');
            
            // 5. Testar carregamento
            console.log('📥 5. Testando carregamento de configuração...');
            loadSmtpConfig();
            
            // 6. Testar conexão
            console.log('🔗 6. Testando conexão SMTP...');
            setTimeout(() => {
                testSmtpConnection();
                
                // 7. Testar envio de email
                console.log('📧 7. Testando envio de email...');
                setTimeout(() => {
                    sendTestEmail();
                    console.log('🎉 ===== TESTE COMPLETO FINALIZADO =====');
                }, 3000);
            }, 3000);
        }
        
        // Tornar função disponível globalmente
        window.testeCompletoSMTP = testeCompletoSMTP;
        
        // ===== SISTEMA SMTP REAL (BACKEND INTEGRADO) =====
        
        // Salvar configuração SMTP
        function saveSmtpConfig() {
            console.log('💾 Salvando configuração SMTP...');
            
            // Obter usuários selecionados para alertas
            const selectedUsers = [];
            const checkboxes = document.querySelectorAll('#userEmailList input[type="checkbox"]:checked');
            checkboxes.forEach(cb => {
                const username = cb.value;
                const user = users[username];
                if (user && user.email) {
                    selectedUsers.push({
                        username: username,
                        name: user.name,
                        email: user.email
                    });
                }
            });

            const config = {
                host: document.getElementById('smtpHost').value.trim(),
                port: parseInt(document.getElementById('smtpPort').value) || 587,
                user: document.getElementById('smtpUser').value.trim(),
                password: document.getElementById('smtpPassword').value.trim(),
                security: document.getElementById('smtpSecurity').value,
                fromName: document.getElementById('smtpFromName').value.trim() || 'Sistema WMS',
                // Campos Resend
                useResend: document.getElementById('useResendApi')?.checked || false,
                resendApiKey: document.getElementById('resendApiKey')?.value.trim() || '',
                alertUsers: selectedUsers,
                alerts: {
                    novoChamado: document.getElementById('alertNovoChamado').checked,
                    statusChange: document.getElementById('alertStatusChange').checked,
                    chamadoVencido: document.getElementById('alertChamadoVencido').checked,
                    resumoDaily: document.getElementById('alertResumoDaily').checked
                },
                enabled: true,
                type: config.useResend && config.resendApiKey ? 'resend' : 'smtp',
                createdAt: new Date().getTime()
            };
            
            // Validar campos obrigatórios
            if (!config.host || !config.port || !config.user || !config.password) {
                showFeedback('❌ Preencha os campos obrigatórios: Servidor, Porta, E-mail e Senha!', 'error');
                return;
            }
            
            if (selectedUsers.length === 0) {
                showFeedback('⚠️ Selecione pelo menos um usuário para receber alertas!', 'warning');
            }
            
            // Salvar no localStorage
            localStorage.setItem('wms_smtp_config', JSON.stringify(config));
            
            showFeedback('✅ Configuração SMTP salva com sucesso!', 'success');
            updateSmtpStatus('✅ Configuração salva. Teste a conexão para verificar.', 'success');
            
            console.log('✅ Configuração SMTP salva:', config);
        }
        
        // Carregar configuração SMTP
        function loadSmtpConfig() {
            console.log('📥 Carregando configuração SMTP...');
            
            // Primeiro carregar lista de usuários
            loadUserEmailList();
            
            const saved = localStorage.getItem('wms_smtp_config');
            if (saved) {
                try {
                    const config = JSON.parse(saved);
                    
                    document.getElementById('smtpHost').value = config.host || '';
                    document.getElementById('smtpPort').value = config.port || 587;
                    document.getElementById('smtpUser').value = config.user || '';
                    document.getElementById('smtpPassword').value = config.password || '';
                    document.getElementById('smtpSecurity').value = config.security || 'tls';
                    document.getElementById('smtpFromName').value = config.fromName || 'Sistema WMS';
                    
                    // Carregar campos Resend
                    if (document.getElementById('useResendApi')) {
                        document.getElementById('useResendApi').checked = config.useResend || false;
                    }
                    if (document.getElementById('resendApiKey')) {
                        document.getElementById('resendApiKey').value = config.resendApiKey || '';
                    }
                    
                    if (config.alerts) {
                        document.getElementById('alertNovoChamado').checked = config.alerts.novoChamado || false;
                        document.getElementById('alertStatusChange').checked = config.alerts.statusChange || false;
                        document.getElementById('alertChamadoVencido').checked = config.alerts.chamadoVencido || false;
                        document.getElementById('alertResumoDaily').checked = config.alerts.resumoDaily || false;
                    }
                    
                    // Marcar usuários selecionados
                    if (config.alertUsers) {
                        setTimeout(() => {
                            config.alertUsers.forEach(user => {
                                const checkbox = document.querySelector(`#userEmailList input[value="${user.username}"]`);
                                if (checkbox) checkbox.checked = true;
                            });
                        }, 100);
                    }
                    
                    updateSmtpStatus('✅ Configuração carregada. Última atualização: ' + new Date(config.createdAt).toLocaleString('pt-BR'), 'success');
                    showFeedback('✅ Configuração SMTP carregada!', 'success');
                    
                    console.log('✅ Configuração SMTP carregada:', config);
                } catch (error) {
                    showFeedback('❌ Erro ao carregar configuração SMTP!', 'error');
                    console.error('❌ Erro:', error);
                }
            } else {
                updateSmtpStatus('⚠️ Nenhuma configuração encontrada. Configure o SMTP para ativar os alertas.', 'warning');
            }
        }
        
        // Testar conexão SMTP (com suporte Resend)
        function testSmtpConnection() {
            console.log('🧪 Testando configuração SMTP...');
            
            const config = getSmtpConfig();
            if (!config) {
                showFeedback('❌ Nenhuma configuração SMTP encontrada!', 'error');
                console.log('❌ Nenhuma configuração encontrada para teste');
                return;
            }
            
            updateSmtpStatus(`🔄 Testando ${config.useResend ? 'Resend API' : 'configuração SMTP'}...`, 'info');
            
            // Fazer chamada para API de teste
            fetch('/api/smtp/test', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    host: config.host,
                    port: config.port,
                    user: config.user,
                    password: config.password,
                    security: config.security,
                    useResend: config.useResend || false,
                    resendApiKey: config.resendApiKey || ''
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const mode = data.mode === 'resend' ? '🚀 RESEND' : '🗾 SIMULAÇÃO';
                    updateSmtpStatus(`✅ ${mode}: ${data.message}`, 'success');
                    showFeedback(`✅ Teste realizado com sucesso! Modo: ${mode}`, 'success');
                    console.log('✅ Teste SMTP bem-sucedido:', data);
                } else {
                    updateSmtpStatus(`❌ Erro: ${data.error}`, 'error');
                    showFeedback(`❌ Falha no teste: ${data.error}`, 'error');
                    console.error('❌ Erro no teste SMTP:', data.error);
                }
            })
            .catch(error => {
                console.error('❌ Erro na requisição:', error);
                updateSmtpStatus('❌ Erro ao comunicar com o servidor. Validando localmente...', 'warning');
                
                // Fallback: validação local
                setTimeout(() => {
                    let errors = [];
                    
                    if (!config.host || !config.host.includes('.')) {
                        errors.push('Host SMTP inválido');
                    }
                    if (!config.port || isNaN(config.port) || config.port < 1 || config.port > 65535) {
                        errors.push('Porta inválida (1-65535)');
                    }
                    if (!config.user || !config.user.includes('@')) {
                        errors.push('E-mail inválido');
                    }
                    if (!config.password || config.password.length < 4) {
                        errors.push('Senha muito curta (mínimo 4 caracteres)');
                    }
                    
                    if (errors.length > 0) {
                        updateSmtpStatus(`❌ Erros encontrados: ${errors.join(', ')}`, 'error');
                        showFeedback('❌ Configuração inválida!', 'error');
                    } else {
                        updateSmtpStatus(`✅ Configuração básica válida (offline)`, 'success');
                        showFeedback('✅ Configuração básica válida!', 'success');
                    }
                }, 1000);
            });
        }
        
        // Enviar e-mail de teste SIMULADO (para demonstração)
        function sendRealTestEmail() {
            console.log('📧 Simulando envio de e-mail de teste...');
            
            const config = getSmtpConfig();
            if (!config) {
                showFeedback('❌ Nenhuma configuração SMTP encontrada!', 'error');
                console.log('❌ Nenhuma configuração encontrada para teste');
                return;
            }
            
            if (!config.alertUsers || config.alertUsers.length === 0) {
                showFeedback('❌ Selecione pelo menos um usuário para receber alertas!', 'error');
                console.log('❌ Nenhum usuário selecionado para alertas');
                return;
            }
            
            console.log('👥 Usuários selecionados para teste:', config.alertUsers);
            
            const mode = config.useResend && config.resendApiKey ? '🚀 RESEND REAL' : '🗾 SIMULAÇÃO';
            updateSmtpStatus(`📧 ${mode}: Enviando para ${config.alertUsers.length} destinatário(s)...`, 'info');
            
            // Fazer chamada para API de envio
            fetch('/api/smtp/send-test', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    host: config.host,
                    port: config.port,
                    user: config.user,
                    password: config.password,
                    security: config.security,
                    fromName: config.fromName,
                    useResend: config.useResend || false,
                    resendApiKey: config.resendApiKey || '',
                    recipients: config.alertUsers
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const resultMode = data.mode === 'resend_real' ? '🚀 RESEND REAL' : '🗾 SIMULAÇÃO';
                    updateSmtpStatus(`✅ ${resultMode}: ${data.message}`, 'success');
                    showFeedback(`🎉 ${resultMode}: E-mail(s) enviado(s) com sucesso!`, 'success');
                    console.log(`✅ Envio ${resultMode}:`, data);
                    
                    // Mostrar detalhes
                    if (data.mode === 'resend_real') {
                        const details = `
                            🎉 E-MAILS REAIS ENVIADOS VIA RESEND!
                            
                            👥 DESTINATÁRIOS (${data.results?.length || config.alertUsers.length}):
                            ${config.alertUsers.map((user, index) => `${index + 1}. ${user.name} <${user.email}>`).join('\n                            ')}
                            
                            🚀 DETALHES:
                            - API: Resend (e-mails REAIS enviados!)
                            - Remetente: ${config.fromName || 'Sistema WMS'}
                            - Status: Entregue nas caixas de entrada
                            
                            ✅ SUCESSO! Verifique as caixas de entrada dos destinatários.
                        `;
                        alert(details);
                    } else {
                        // Fallback para simulação (código original)
                        setTimeout(() => {
                        const allEmails = [];
                        const emailList = config.alertUsers.map(user => `${user.name} <${user.email}>`);
                        
                        config.alertUsers.forEach(user => {
                            const emailContent = {
                                from: `${config.fromName || 'Sistema WMS'} <${config.user}>`,
                                to: user.email,
                                subject: '🧪 Teste SIMULADO - Sistema WMS',
                                mode: 'simulation'
                            };
                            allEmails.push(emailContent);
                            console.log(`📧 E-mail simulado para ${user.name}:`, emailContent);
                        });
                        
                        const details = `
                            🗾 E-MAILS SIMULADOS (SEM RESEND API):
                            
                            👥 SIMULADO PARA ${config.alertUsers.length} DESTINATÁRIO(S):
                            ${emailList.map((email, index) => `${index + 1}. ${email}`).join('\n                            ')}
                            
                            ⚠️ PARA ENVIO REAL:
                            1. Configure Resend API Key
                            2. Marque "Usar Resend para envio REAL"
                            3. Teste novamente
                            
                            🔗 Criar conta: https://resend.com
                        `;
                        alert(details);
                        }, 1500);
                    }
                } else {
                    updateSmtpStatus(`❌ Erro: ${data.error}`, 'error');
                    showFeedback(`❌ Falha no envio: ${data.error}`, 'error');
                    console.error('❌ Erro no envio:', data.error);
                }
            })
            .catch(error => {
                console.error('❌ Erro na requisição:', error);
                updateSmtpStatus('❌ Erro ao comunicar com servidor. Modo offline ativado.', 'error');
                showFeedback('❌ Erro de conexão. Tente novamente.', 'error');
            });
        }
        
        // Obter configuração SMTP
        function getSmtpConfig() {
            const saved = localStorage.getItem('wms_smtp_config');
            if (saved) {
                try {
                    return JSON.parse(saved);
                } catch (error) {
                    console.error('❌ Erro ao obter configuração SMTP:', error);
                    return null;
                }
            }
            return null;
        }
        
        // SMTP Real - Não precisa mais de modo toggle
        // Sistema agora usa nodemailer diretamente
        
    </script>
</body>
</html>